#!/usr/bin/env python
# -*- coding: utf-8 -*-


from sys import argv
import os.path
from datetime import datetime
from fb_utils import get_json, get_access_token_from_file


def get_shares(post_id, accessToken):
    shares_url = 'https://graph.facebook.com/' + str(post_id) + '/?fields=shares&' + accessToken
    post = get_json(shares_url)
    if 'shares' in post:
        shares = post['shares']['count']
    else:
        shares = 0
    return shares


def get_likes(post_id, accessToken):

    users = []
    likes_url = 'https://graph.facebook.com/' + str(post_id) + '/likes?limit=200&' + accessToken
    likes = get_json(likes_url)
    if len(likes['data']):
        users = users + likes['data']
        while 'next' in likes['paging']:
            nextlikes_url = likes['paging']['next']
            likes = get_json(nextlikes_url)
            users = users + likes['data']
    return users


def get_insights(post_id, accessToken):

    values = []
    tasks = [
        'post_impressions_unique/lifetime',
        'post_impressions_fan_unique/lifetime',
        'post_impressions_organic_unique/lifetime',
        'post_impressions_paid_unique/lifetime',
        'post_impressions_viral_unique/lifetime',
        'post_negative_feedback_unique/lifetime',
        'post_consumptions_unique/lifetime']
    for task in tasks:
        insights_url = 'https://graph.facebook.com/' + str(post_id) + '/insights/' + task + '?' + accessToken
        print insights_url
        value = get_json(insights_url)
#       print value
        values = values + [value['data'][0]['values'][0]['value']]

    task = 'post_consumptions_by_type_unique/lifetime'
    insights_url = 'https://graph.facebook.com/' + str(post_id) + '/insights/' + task + '?' + accessToken

    insights = get_json(insights_url)
    types = ["other clicks", "photo view", "link clicks"]

    for typ in types:
        if typ in insights['data'][0]['values'][0]['value']:
            values = values + [insights['data'][0]['values'][0]['value'][typ]]
        else:
            values = values + [0]

    values = values[0:2] + [values[0] - values[1]] + [float(values[1]) / values[0] * 100] + [float(values[0] - values[1]) / values[0] * 100] + values[2:]

    return values


def get_comments(post_id, accessToken):

    c = []
    comments_url = 'https://graph.facebook.com/' + post_id + '/comments?limit=200&' + accessToken
    comments = get_json(comments_url)
    if len(comments['data']):
        c = c + comments['data']
        while 'next' in comments['paging']:
            nextcomments_url = comments['paging']['next']
            comments = get_json(nextcomments_url)
            c = c + comments['data']

    users = []
    for comment in c:
        users = users + [comment['from']]

    return users

if len(argv) != 2:
    print "Usage: " + argv[0] + " <post_id>"
    exit(1)

post_id = argv[1]

print post_id

accessToken = 'access_token=' + get_access_token_from_file()

OUTPUT = 'post-reach/post-reach-' + post_id + '.csv'
if os.path.isfile(OUTPUT):
    f = open(OUTPUT, 'a')
else:
    f = open(OUTPUT, 'w')
    f.write((u'likes, comments, shares, alcance, alcance (fan), alcance (no fan), %alcance (fan), %alcance (no fan), alcance (org√°nico), alcance (pagado), alcance (viral), feedback negativo, clicks, clicks (otros), clicks (fotos), clicks (links), fecha' + '\n').encode('utf8'))

post_tag = '473881175964178_' + post_id
post_insights = get_insights(post_tag, accessToken)

text_insights = ''
for ins in post_insights:
    if len(text_insights):
        text_insights = text_insights + ',' + str(ins)
    else:
        text_insights = text_insights + str(ins)
print


comments = len(get_comments(post_tag, accessToken))
likes = len(get_likes(post_tag, accessToken))
shares = get_shares(post_tag, accessToken)
datenow = datetime.now()

print (str(likes) + ',' + str(comments) + ',' + str(shares) + ',' + text_insights + ',' + str(datenow) + '\n').encode('utf8')
f.write((str(likes) + ',' + str(comments) + ',' + str(shares) + ',' + text_insights + ',' + str(datenow) + '\n').encode('utf8'))

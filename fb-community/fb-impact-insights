#!/usr/bin/env python
# -*- coding: utf-8 -*-

from utils import get_json, get_access_token_from_file

accessToken = ""


def get_likes(post_id):
    likes_url = 'https://graph.facebook.com/' + str(post_id) + '/likes?limit=200&' + accessToken
    likes = get_json(likes_url)

    users = []
    if len(likes['data']):
        users += likes['data']
        while 'next' in likes['paging']:
            nextlikes_url = likes['paging']['next']
            likes = get_json(nextlikes_url)
            users += likes['data']
    return users


def get_insights(post_id):
    values = []
    tasks = [
        'post_impressions_unique/lifetime',
        'post_impressions_fan_unique/lifetime',
        'post_impressions_organic_unique/lifetime',
        'post_impressions_paid_unique/lifetime',
        'post_impressions_viral_unique/lifetime',
        'post_negative_feedback_unique/lifetime',
        'post_consumptions_unique/lifetime']
    for task in tasks:
        insights_url = 'https://graph.facebook.com/' + str(post_id) + '/insights/' + task + '?' + accessToken
        insights = get_json(insights_url)
        print insights
        try:
            values += [insights['data'][0]['values'][0]['value']]
        except:
            print '###### ERROR: data is empty! ########'
            values += [0]

    task = 'post_consumptions_by_type_unique/lifetime'
    insights_url = 'https://graph.facebook.com/' + str(post_id) + '/insights/' + task + '?' + accessToken
    insights = get_json(insights_url)
    print insights

    for typ in ["other clicks", "photo view", "link clicks"]:
        insight_values = insights['data'][0]['values'][0]['value']
        if typ in insight_values:
            values += [insight_values[typ]]
        else:
            values += [0]

    values = values[0:2] + [values[0] - values[1]] + values[2:]
    return values


def get_comments(post_id):
    comments_url = 'https://graph.facebook.com/' + str(post_id) + '/comments?limit=200&' + accessToken
    comments = get_json(comments_url)

    c = []
    if len(comments['data']):
        c += comments['data']
        while 'next' in comments['paging']:
            nextcomments_url = comments['paging']['next']
            comments = get_json(nextcomments_url)
            c += comments['data']

    users = []
    for comment in c:
        users += [comment['from']]

    return users


# UNUSED
def get_user_url(user_id):
    user_url = 'https://graph.facebook.com/' + str(user_id)
    print user_url
    user = get_json(user_url)

    if 'link' in user:
        return user['link']
    else:
        return 'None'


def get_page_impact(pageId):
#   with open('fb.keys') as f:
#       FACEBOOK_APP_ID = f.readline().strip("\n")
#       FACEBOOK_APP_SECRET = f.readline().strip("\n")
#   token_url='https://graph.facebook.com/oauth/access_token?grant_type=client_credentials&client_id='+FACEBOOK_APP_ID+'&client_secret='+FACEBOOK_APP_SECRET
#   accessToken = urlopen(token_url).read()

    url = 'https://graph.facebook.com/' + pageId + '/posts?' + accessToken
    print url

    jsonContent = get_json(url)
    cond = True

    csvfile = 'post_impact_insights_' + pageId + '.csv'
    fields = ['post_id', 'message', 'date', '#likes', '#comments', '#shares', 'Reach', 'Reach (fans)', 'Reach (no fans)', 'Reach (organic)',
              'Reach (paid)', 'Reach (viral)', 'Negative feedback', 'Clicks', 'Clicks (otros)', 'Clicks (photos)', 'Clicks (links)']
    fields = ','.join(fields).encode('utf8') + '\n'

    f = open(csvfile, 'w')
    f.write(fields)
    while cond:
        for post in jsonContent['data']:
            if 'message' in post:
                post_id = post['id']
                print post_id
                post_insights = get_insights(post_id)
                message = '|' + post['message'] + '|'
                if 'shares' in post:
                    shares = str(post['shares']['count'])
                else:
                    shares = '0'
                time = '|' + post["created_time"] + '|'
                comments = str(len(get_comments(post_id)))
                likes = str(len(get_likes(post_id)))

                output_text = [post_id, message, time, likes, comments, shares] + post_insights
                output_text = ','.join(output_text).encode('utf8') + '\n'
                f.write(output_text)
                print output_text

        cond = 'paging' in jsonContent

        if cond:
            url = jsonContent['paging']['next']
            print url
            jsonContent = get_json(url)

    f.close()


if __name__ == '__main__':
    global accessToken
    accessToken = get_access_token_from_file()

    get_page_impact('PartidoXPartidodelFuturo')  # Partido X
